import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.Exec

def bmotionVersion = '0.2.6'
def probVersion = 'milestone-28'
def appVersion = '0.2.6'
def targets = ["linux-ia32": "linux32", "linux-x64": "linux64", "darwin-x64": "leopard64", "win32-ia32": "win32", "win32-x64": "win64"]

// ----------------------------------------
// Helper methods ...
// ----------------------------------------
def download(String address, String target) {
    def file = new FileOutputStream(target)
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}

def download_cspm(String target) {
    def String downloadFile = target
    def String postfix = ""
    if (target == "win32" || target == "win64") {
        downloadFile = "windows"
        postfix = ".exe"
    }
    def String url = "http://www3.hhu.de/stups/downloads/cspmf/cspmf-" + downloadFile + postfix
    println "Downloading cspm for " + target + " ..."
    def String dir = "build/cli/" + target + "_cli/cli/lib/cspmf" + postfix
    download(url, dir)
    new File(dir).setExecutable(true)
    println " done."
}

def download_cli(target, probVersion) {
    def downloadFile = target
    def String dir = "build/cli/" + target + "_cli/cli"
    def d = new File(dir)
    delete file(d)
    d.mkdirs();
    //def url = "http://nightly.cobra.cs.uni-duesseldorf.de/tmp/" + probVersion + "/probcli_" + downloadFile + ".zip"
    def url = "https://www3.hhu.de/stups/downloads/prob/cli/nightly/probcli_" + downloadFile + ".zip"
    //def nwurl = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/probcli_"+downloadFile+".zip"
    println "Downloading cli for " + target + " ..."
    def String targetzip = dir + "probcli.zip"
    download(url, targetzip)
    println " done."
    FileTree zip = zipTree(targetzip)
    println "Unzipping " + zip
    copy {
        from zip
        into dir
    }
    delete file(targetzip)
}

apply plugin: 'java'
apply plugin: 'maven'

repositories {
    mavenCentral()
    maven {
        name "sonatype snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name "sonatype releases"
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
    maven {
        name "cobra"
        url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
    }
}

dependencies {
    compile group: 'de.hhu.stups', name: 'bmotion-prob', version: bmotionVersion, changing: true
}

// Extend clean task ...
clean {
    delete("build")
}

task getLibs(dependsOn: jar) << {
    copy {
        from configurations.compile
        into 'build/libs'
    }
}

task npmDeps(type: Exec) {
    commandLine "npm", 'install'
}

task copyPackageJson(type: Copy) {
    from 'package.json'
    into 'build'
}

task npmProductionDeps(dependsOn: [copyPackageJson], type: Exec) {
    commandLine "npm", 'install', '--production', '--prefix', 'build'
}

task grunt_standalone_all(dependsOn: [npmDeps], type: GruntTask) {
    gruntArgs = "standalone_all --force"
}

targets.each() { target, cliTarget ->

    task "downloadCli_${target}" << {
        download_cli(cliTarget, probVersion)
        download_cspm(cliTarget)
    }

    task "copyResources_${target}"(dependsOn: ["grunt_standalone_${target}", getLibs, "npmProductionDeps", "downloadCli_${target}"], type: Copy) {
        from 'build/cli/' + cliTarget + '_cli'
        from 'bmotion.json'
        from('build') {
            include 'node_modules/**'
            include 'libs/**'
            include 'template/**'
        }
        if (target == "darwin-x64") {
            into 'build/client/bmotion-prob-' + target + '/bmotion-prob.app/Contents/Resources'
        } else {
            into 'build/client/bmotion-prob-' + target + '/resources'
        }
    }

    task "copyCli_${target}"(dependsOn: ["grunt_standalone_${target}", "downloadCli_${target}"], type: Copy) {
        from 'build/cli/' + cliTarget + '_cli'
        if (target == "darwin-x64") {
            into 'build/client/bmotion-prob-' + target + '/bmotion-prob.app/Contents/Resources'
        } else {
            into 'build/client/bmotion-prob-' + target + '/resources'
        }
    }

    task "zip_${target}"(dependsOn: ["copyResources_${target}"], type: Zip) {
        destinationDir = new File('build/dist/' + appVersion)
        archiveName = 'bmotion-prob-' + appVersion + '-' + target + '.zip'
        from('build/client/bmotion-prob-' + target) {
            into "./bmotion-prob-" + appVersion
        }
    }

    task "grunt_standalone_${target}"(dependsOn: [npmDeps], type: GruntTask) {
        gruntArgs = "template standalone_${target} --force"
    }

    task "standalone_${target}"(dependsOn: ["zip_${target}"]) {}

}

task standalone_all(dependsOn: [tasks.withType(Copy).matching { task -> task.name.startsWith('assemble_') },
                                tasks.withType(Zip).matching { task -> task.name.startsWith('zip_') }]) << {
}

class GruntTask extends Exec {
    private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
    private String switches = "--no-color"

    public GruntTask() {
        super()
        this.setExecutable(gruntExecutable)
    }

    public void setGruntArgs(String gruntArgs) {
        this.args = "$switches $gruntArgs".trim().split(" ") as List
    }
}
